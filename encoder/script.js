(function() {
    let textarea = document.querySelector('textarea');
    let input = document.querySelector('input');
    let btnEnc = document.querySelector('#btn-enc');
    let btnDec = document.querySelector('#btn-dec');
    let select = document.querySelector('#symbol-type');
    const emoji = [];
    const ascii = [];

    for (let i = 0; i < 10; i++) {
        ascii.push(String.fromCharCode(48 + i));
    }
    for (let i = 0; i < 26; i++) {
        ascii.push(String.fromCharCode(65 + i));
    }
    for (let j = 0; j < 26; j++) {
        ascii.push(String.fromCharCode(97 + j));
    }
    ascii.push('+');
    ascii.push('/');
    ascii.push('=');

    const targetChars = {
        emoji: 'üòÄüòÅü§£üòÇüòÑüòÖüòÜüòáüòâüòäüôÇüôÉüòãüòåüòçüòòüòôüòúüòùü§ëüê∂üê±üê≠üêπüê∞üêªüêºüê®üêµüêôüê∏üêΩüê∑üêÆü¶ÅüêØüôàüôâüôäüêíüêîüçèüçéüçêüçäüçãüçåüçâüçáüçÖü•ëü•ùüççüçëüçíüçàüçìüçÜü•íü•ïüå∂ü•î‚öΩÔ∏èüèÄüèà‚öæÔ∏è',
        chemistry: 'Ê∞¢Ê∞¶ÈîÇÈìçÁ°ºÁ¢≥Ê∞ÆÊ∞ßÊ∞üÊ∞ñÈí†ÈïÅÈìùÁ°ÖÁ£∑Á°´Ê∞ØÊ∞©ÈíæÈíôÈí™ÈíõÈííÈì¨Èî∞ÈìÅÈí¥ÈïçÈìúÈîåÈïìÈîóÁ†∑Á°íÊ∫¥Èì∑Èî∂ÈíáÈîÜÈíºÈîùÈíåÈìëÈíØÈì∂ÈïâÈìüÈî°ÈîëÁ¢≤Á¢òÊ∞ôÈìØÈí°ÈïßÈì™ÈíΩÈí®ÈìºÈîáÈì±ÈìÇÈáëÊ±û',
        marsFont: '‰º±Â™ûÓ†ñÊ∂êÂÜáÂ∞êËäºËºïÂÄØÁç≤ÂòöË∂†Ë∫∞Áâ∏‰æûÁî™ÂêôÁÖãÂñ•Ëº∏ÂÖ¶Á∞ßÂ≠íÊáâÂ∞®Áò°Á•Ç„ÅÆ‰Ω≤‰ΩΩ„ÇêÁ¨ïÊÅ†ÂëøÂìñÂóÑËî≠„ÑùÂ≠∏ËãåÂπµ—ÑÂó∞Áî°Ê¥éÂìôÂüòÂ††ËêÅÂÉ¶ÂçüË™çË≠òËèø‰πúË®±‰øìÁÄè‰æΩÂÄµÊãñË©òÂæî',
        symboledEmotion: '(*Ôø£(„Ç®)Ôø£) (>^œâ^<)Âñµ ¬†(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°) Ôºà¬ØÔπÉ¬ØÔºâÂè£Ê∞¥ (ÔΩûÔπÉÔΩû)~zZ Âõßrz _(:–∑„Äç‚à†)_ (‚ï•‚ïØ^‚ï∞‚ï•) ‚î≠‚îÆÔπè‚î≠‚îÆ ‚ï≠(‚ïØ^‚ï∞)‚ïÆ (Ôø£.Ôø£) (Ôø£‚ñΩÔø£)~ *‚ïÆ(Ôø£‚ñΩÔø£) ‚ï≠(Ôø£‚ñΩÔø£)" ÔºàÔø£Ô∏∂Ôø£Ôºâ‚Üó <(Ôø£Ô∏∂Ôø£)> Ô∏ø(Ôø£Ô∏∂Ôø£)Ô∏ø \ÔºàÔø£Ô∏∂Ôø£Ôºâ/ :Ôºâ :-) :-D XD \(^o^)/ Y(^o^)Y (^.^)Y Ya!!(ÔºæÔºçÔºæ)V m9(`–î¬¥)¬†¬†(`–î¬¥*)9 „ÉΩ(ÔΩÄ‚åí¬¥)Ôæâ¬† (*¬¥ÔæâÁöø`)¬†(`Áöø¬¥)¬†„ÉΩ(ÔΩÄ–î¬¥)Ôæâ „ÉΩ(`–ó‚Äô)Ôæâ d(ÔΩ•ÔΩÄœâ¬¥ÔΩ•d*) :-(¬†o(TœâT)o¬†(*T_T*)¬†(/‚ñ°Ôºº*) (‚ï•‚ïØ^‚ï∞‚ï•) /(„Ñío„Ñí)/ ~~T^T ‚ï•Ôπè‚ï• ... :-O (*Ôæü–îÔæü*)¬†Ôæâ)Ôæü–îÔæü(¬†„ÉΩ(Ôºõ¬¥–îÔΩÄ)Ôæâ¬†—â(Ôæü–îÔæü—â) ‰πÇ(Ôæü–îÔæü‰∏âÔæü–îÔæü)‰πÇ¬†Œ£(oÔæü–¥ÔæüoÔæâ)! ?(ÔΩ•_ÔΩ•;? (‚äôo‚äô) o((‚äôÔπè‚äô))o .(*‚äô~‚äô) (O_O)? ‚Ä¶Ôºà‚äôÔºø‚äôÔºõÔºâ ‚Ä¶(‚äôx‚äô;) wow~‚äôo‚äô (O_o)?? o_O||¬†(;Ôø¢ÔºøÔø¢) Ôæç(*‚Äì-)Ôæâ¬† (Ôø£oÔø£).zZ ¬†‚îê(ÔæüÔΩûÔæü) ‚îåÂΩ°(-_-;)ÂΩ° ‚îÄ=‚â°Œ£(((„Å§‚Ä¢ÃÄœâ‚Ä¢ÃÅ)„Å§ ‚ï≠(‚Ä≤‚ñΩ`)‚ï≠ (‚Ä≤‚ñΩ`)‚ïØ (‡πë¬¥„ÖÇ`‡πë)¬†Ôºà‚óêÀç‚óëÔºâ (ÔΩ•‡∏¥œâÔΩ•‡∏¥) ·É∞·É∞·É∞‚ùõ‚Äø‚ùõ·É¥·É¥·É¥ (¬¥‡∞•‡±™‡∞•Ôºâ œÉ(·áÇ–¥·áÇ U‚Ä¢„Çß‚Ä¢*U \\‚ÄµÔºà‚óè‚óèÔºâ‚Äµ\\'
    };
    const emojiChars = 'üòÄüòÅü§£üòÇüòÑüòÖüòÜüòáüòâüòäüôÇüôÉüòãüòåüòçüòòüòôüòúüòùü§ëüê∂üê±üê≠üêπüê∞üêªüêºüê®üêµüêôüê∏üêΩüê∑üêÆü¶ÅüêØüôàüôâüôäüêíüêîüçèüçéüçêüçäüçãüçåüçâüçáüçÖü•ëü•ùüççüçëüçíüçàüçìüçÜü•íü•ïüå∂ü•î‚öΩÔ∏èüèÄüèà‚öæÔ∏è';

    for (let char of targetChars.emoji) {
        emoji.push(char);
    }

    let symbols = emoji;
    let encMap, decMap;
    let currentEncryptType = 0;

    function setSymbols(type = 0) {
        currentEncryptType = type;
        encMap = {};
        decMap = {};
        switch (type) {
            case 0:
                symbols = emoji;
                break;
            case 1:
                symbols = targetChars.chemistry.split('');
                break;
            case 2:
                symbols = targetChars.marsFont.split('');
                break;
            case 3:
                symbols = targetChars.symboledEmotion.split(' ');
                break;
            default:
                symbols = emoji;
        }
        ascii.forEach((char, index) => {
            encMap[char] = symbols[index];
            decMap[symbols[index]] = char;
        });
    }

    function encrypt(text = '', key = '') {
        let devider = '';
        if (currentEncryptType === 3) devider = ' ';
        if (!String.fromCodePoint) {
            alert('Your fuckint browser doesnt support ES6. Please change another one or upgrade it.');
            return '';
        }
        text = convert2Ascii(text);
        key = convert2Ascii(key);
        while (key.length < text.length) {
            key += key;
        }
        key = key.split('');
        text = text.split('').map((char, index) => {
            let sum = char.charCodeAt(0) + key[index].charCodeAt(0);
            return String.fromCharCode('0x' + sum);
        }).join('');

        text = btoa(encodeURIComponent(text));
        text = text.split('').map(char => {
            let ret = encMap[char];
            return ret;
        }).join(devider);
        return text;
    }

    function decrypt(text = '', key = '') {
        try {
            let temp = [];
            temp = devide(text).map(char => decMap[char]).join('');
            text = decodeURIComponent(atob(temp));
            let codePoints = [];
            key = convert2Ascii(key);
            for (let char of text) {
                let num = parseInt(char.codePointAt(0));
                codePoints.push(num.toString(16));
            }
            while (key.length < codePoints.length) {
                key += key;
            }
            text = codePoints.map((n, index) => {
                let codePoint = n - key[index].charCodeAt(0);
                return String.fromCharCode(codePoint);
            }).join('');
            return decodeURIComponent(atob(text));
        } catch (e) {
            alert('Wrong key, decode fail.');
            return '';
        }
    }

    function devide(text) {
        if (isEmoji(text)) {
            let ret = [];
            for (let char of text) {
                ret.push(char);
            }
            return ret;
        } else {
            let devider = getDevider(text);
            return text.split(devider);
        }
    }

    function getDevider(text) {
        // let encryptTypeItems = document.querySelectorAll('#encrypt-types input[name=type]').length;

        if (text.includes(' ')) return ' ';
        return '';
    }

    function isEmoji(text) {
        let codePoint = text.codePointAt(0);
        return targetChars.emoji.includes(String.fromCodePoint(codePoint));
    }

    function convert2Ascii(str = 'xxx') {
        return btoa(encodeURIComponent(str));
    }

    btnEnc.addEventListener('click', () => {
        let encryptType = document.querySelector('input:checked').value;
        encryptType = Number(encryptType);
        console.info(encryptType);
        setSymbols(encryptType);
        commonProcess(encrypt);
    });

    btnDec.addEventListener('click', () => {
        commonProcess(decrypt);
    });

    function commonProcess(fn) {
        let text = textarea.value;
        let key = input.value;
        if (!key) {
            alert('ËØ∑ËæìÂÖ•ÂØÜÁ†Å');
            return;
        }
        let result = fn(text, key);

        textarea.value = result;
    }
}());
